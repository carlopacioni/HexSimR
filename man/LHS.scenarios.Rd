% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xml_utilities.R
\name{LHS.scenarios}
\alias{LHS.scenarios}
\title{Generate LHS scenarios}
\usage{
LHS.scenarios(path.scenarios = NULL, xml.template = NULL, samples,
  csv.in, generate = TRUE)
}
\arguments{
\item{path.scenarios}{The path to the 'Scenarios' folder}

\item{xml.template}{The name of the xml file to use as template for the new
nodes}

\item{samples}{The number of LHS samples (i.e. parameter combinations)}

\item{csv.in}{The name of the .csv file in the "Scenarios" folder with the
information on the nodes that need to be modified (or checked in case of
xml.cond.replacement)}

\item{generate}{Whether generate (TRUE) the xml files or stop after having 
created the hypercube matrix (FALSE)}
}
\value{
A list where the first element is the hyercube matrix and the second 
  are the nodes found in the template (if generate = TRUE). A csv file with 
  the hypercube matrix is saved to disk and,  when generate = TRUE, the LHS 
  xml files are also saved to disk.
}
\description{
This function is used to generate scenarios whose parameter combinations 
follow a Latin Hypercupe Sampling design. Parameter values can be drawn from 
normal, lognormal, binomial, beta or uniform distributions or have a set of 
fixed values.
}
\details{
An xml file is passed (with \code{xml.template}) to build the LHS scenarios, 
which are saved in the same \code{path.scenarios} where the template is.

If \code{generate} is FALSE, then the function quits after generating the 
hypercube matrix.

An .csv file needs to be created, must be located in the scenario folder and 
the name should be passed with \code{csv.in} as a character vector (see 
\code{system.file("extdata", "test_csv_LHS.csv", package="HexSimR")} for an 
example).

The .csv must have the following headings: nodes, identifier, attribute, 
param_node, param_node_identifier, param_node_attribute, param_identifier, 
param_name, type, value, distribution. See documentation for 
\code{scenarios.batch.modifier} on the meaning of nodes, identifier, 
attribute. When \code{generate=FALSE} only the last four are mandatory.

There might be situation where the parameter values to be changed is in an 
internal node respect to the node identifier. In order to identified uniquely
this parameter, the identifier of the parameter node needs to be indicated. 
This is best explained with an example. An accumulateTrait is identified by 
the name attribute (i.e. <accumulateTrait name="XXX">), however the parameter
values are contained in the <value> node within the accumulateTrait. The node
<value> is itself identified by a name attribute, but the parameters are 
stored under a "threshold" attribute. To avoid multiple hit \bold{nodes}, 
\bold{identifier} and \bold{attribute} are used to identify uniquely the 
parent node where the parameter is contained. 
\bold{param_node},	\bold{param_node_identifier}, and 
\bold{param_node_attribute} are used to identify the node where the parameter
values are contained (if necessary, use NA for \bold{param_node} and FALSE 
for the others columns if not relevant), and \bold{param_identifier} is used 
to identify the actual parameter values that need to be changed, when this is
stored as an attribute. Use FALSE when the latter is not relevant (e.g. if 
the node identifier is the parameter that needs to be changed).

\bold{type} refers to the type of parameter. It can take exactly one of the 
following: "integer", "numeric" or "character". \bold{value} refers to the 
parameters of the distribution from which values are drawn (separated by a 
comma) if one is used: mean and sd for normal, meanlog and sdlog for 
lognormal, shape1 and shape2 for beta, prob for binomial and min and max for 
uniform, otherwise a collection of values if \bold{distribution}="fixed". 
When \bold{distribution}="fixed" or \bold{type}="character" the elements in 
\bold{value} have equal probability.

\bold{param_name} is the name of the parameter that is being changed. These 
are used as labels (headers) in the hypercube matrix that it is saved to disk
and returned as an object.

When \code{generate=TRUE}, the second element of the list returned contains 
the nodes found in the template. It is probably a good idea to scan through 
these to check whether these were the expected ones and most importantly that
none are empty!
}
